#!/usr/bin/env bash

. bpm
bpm::include assign
bpm::include strict


# Determines if a value is in an array.
#
# $1    - The value to seek in the array.
# $2-$@ - Array elements.
#
# Examples
#
#   local index list
#
#   list=(one two three "four four")
#
#   if array::contains one "${list[@]}"; then
#       # This one works
#       echo "one is found"
#   fi
#
#   if array::contains four "${list[@]}"; then
#       echo "four should not be found"
#       echo "'four four' with a space would be found"
#   fi
#
# Returns true (0) if $1 is found in the list of other arguments, false (1)
# otherwise.
array::contains() {
    local check needle

    needle=$1
    shift 1

    for check in "$@"; do
        if [[ "$needle" == "$check" ]]; then
            return 0
        fi
    done

    return 1
}


# Run a list of values through a filter. When the filter returns an error,
# remove that element from the list.
#
# $1    - Variable name where the final list will be placed.
# $2    - Function or command to run. Receives one argument: a single value
#         from the list.
# $3-$@ - List of values in the array.
#
# Examples
#
#   removeAnimals() {
#       case "$1" in
#           dog|cat|cow|moose)
#               # Return failure and the elements will be removed.
#               return 1
#               ;;
#       esac
#
#       return 0
#   }
#
#   words=(a dog and a cat chased a cow)
#   array::filter filtered removeAnimals "${words[@]}"
#
#   # Prints "a and a chased a". The special hyphen allows you to print an
#   # empty array in strict mode.
#   echo "${filtered[@]-}"
#
# Returns nothing.
array::filter() {
    local filter result returnCode target

    target=$1
    shift
    filter=$1
    shift
    result=()

    while [[ $# -gt 0 ]]; do
        strict::run returnCode "$filter" "$1"

        if [[ "$returnCode" -eq 0 ]]; then
            result[${#result[@]}]=$1
        fi

        shift
    done

    # shellcheck disable=SC2068
    local "$target" && assign::array "$target" ${result[@]+"${result[@]}"}
}


# Check if a value is in an array.  If the value is found, the index within
# the array is assigned to the destination variable and this returns true.
# If it is not in the array, nothing is assigned and the function returns
# an error.
#
# $1    - Destination value for storing the index that is found.
# $2    - The value to seek in the array.
# $3-$@ - Array elements.
#
# The destination variable is only set when the element is found.
#
# Examples
#
#   local index list
#
#   list=(one two three "four four")
#
#   if array::indexOf index one "${list[@]}"; then
#       # This one works
#       echo "one is found at index $index"
#   fi
#
#   if array::indexOf index four "${list[@]}"; then
#       echo "four should not be found"
#       echo "'four four' with a space would be found"
#       echo "\$index will not be updated"
#   fi
#
# Returns success if $1 is found in the list of other arguments.
array::indexOf() {
    local check index needle target

    target=${1-}
    needle=${2-}
    shift 2
    index=0

    for check in "$@"; do
        if [[ "$needle" == "$check" ]]; then
            local "$target" && assign::value "$target" "$index"

            return 0
        fi

        index=$((index + 1))
    done

    return 1
}


# Join / implode an array
#
# $1    - Variable name to receive the joined content
# $2    - Joiner
# $3-$@ - Elements to join
#
# Returns nothing.
array::join() {
    local joiner result target

    target=${1-}
    joiner=${2-}
    shift
    shift
    printf -v result "$joiner%s" "$@"
    result=${result:${#joiner}}

    local "$target" && assign::value "$target" "$result"
}
